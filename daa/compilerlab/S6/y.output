Grammar

    0 $accept: program $end

    1 program: declaration main_function compile
    2        | main_function compile

    3 main_function: mains '(' ')' function

    4 function: begins Slist ends

    5 declaration: decls decl_list enddecls

    6 decl_list: decl_list type var_list ';'
    7          | type var_list ';'

    8 type: integer
    9     | boolean

   10 var_list: var_list ',' var_complex
   11         | var_complex

   12 var_complex: VAR
   13            | VAR '[' NUM ']'

   14 Slist: Slist Stmt
   15      | Stmt

   16 Stmt: VAR '=' E ';'
   17     | reads '(' VAR ')' ';'
   18     | VAR '[' E ']' '=' E ';'
   19     | reads '(' VAR '[' E ']' ')' ';'
   20     | writes '(' E ')' ';'
   21     | ifs '(' E ')' thens Slist elses Slist endifs ';'
   22     | ifs '(' E ')' thens Slist endifs ';'
   23     | whiles '(' E ')' dos Slist endwhiles ';'

   24 E: E '+' E
   25  | E '*' E
   26  | '(' E ')'
   27  | E IFEQ E
   28  | E '>' E
   29  | E '<' E
   30  | VAR
   31  | VAR '[' E ']'
   32  | NUM


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 17 19 20 21 22 23 26
')' (41) 3 17 19 20 21 22 23 26
'*' (42) 25
'+' (43) 24
',' (44) 10
';' (59) 6 7 16 17 18 19 20 21 22 23
'<' (60) 29
'=' (61) 16 18
'>' (62) 28
'[' (91) 13 18 19 31
']' (93) 13 18 19 31
error (256)
VAR (258) 12 13 16 17 18 19 30 31
NUM (259) 13 32
reads (260) 17 19
writes (261) 20
ifs (262) 21 22
whiles (263) 23
IFEQ (264) 27
thens (265) 21 22
endifs (266) 21 22
dos (267) 23
endwhiles (268) 23
compile (269) 1 2
elses (270) 21
begins (271) 4
ends (272) 4
integer (273) 8
boolean (274) 9
decls (275) 5
enddecls (276) 5
mains (277) 3


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1 2, on right: 0
main_function (36)
    on left: 3, on right: 1 2
function (37)
    on left: 4, on right: 3
declaration (38)
    on left: 5, on right: 1
decl_list (39)
    on left: 6 7, on right: 5 6
type (40)
    on left: 8 9, on right: 6 7
var_list (41)
    on left: 10 11, on right: 6 7 10
var_complex (42)
    on left: 12 13, on right: 10 11
Slist (43)
    on left: 14 15, on right: 4 14 21 22 23
Stmt (44)
    on left: 16 17 18 19 20 21 22 23, on right: 14 15
E (45)
    on left: 24 25 26 27 28 29 30 31 32, on right: 16 18 19 20 21 22
    23 24 25 26 27 28 29 31


state 0

    0 $accept: . program $end

    decls  shift, and go to state 1
    mains  shift, and go to state 2

    program        go to state 3
    main_function  go to state 4
    declaration    go to state 5


state 1

    5 declaration: decls . decl_list enddecls

    integer  shift, and go to state 6
    boolean  shift, and go to state 7

    decl_list  go to state 8
    type       go to state 9


state 2

    3 main_function: mains . '(' ')' function

    '('  shift, and go to state 10


state 3

    0 $accept: program . $end

    $end  shift, and go to state 11


state 4

    2 program: main_function . compile

    compile  shift, and go to state 12


state 5

    1 program: declaration . main_function compile

    mains  shift, and go to state 2

    main_function  go to state 13


state 6

    8 type: integer .

    $default  reduce using rule 8 (type)


state 7

    9 type: boolean .

    $default  reduce using rule 9 (type)


state 8

    5 declaration: decls decl_list . enddecls
    6 decl_list: decl_list . type var_list ';'

    integer   shift, and go to state 6
    boolean   shift, and go to state 7
    enddecls  shift, and go to state 14

    type  go to state 15


state 9

    7 decl_list: type . var_list ';'

    VAR  shift, and go to state 16

    var_list     go to state 17
    var_complex  go to state 18


state 10

    3 main_function: mains '(' . ')' function

    ')'  shift, and go to state 19


state 11

    0 $accept: program $end .

    $default  accept


state 12

    2 program: main_function compile .

    $default  reduce using rule 2 (program)


state 13

    1 program: declaration main_function . compile

    compile  shift, and go to state 20


state 14

    5 declaration: decls decl_list enddecls .

    $default  reduce using rule 5 (declaration)


state 15

    6 decl_list: decl_list type . var_list ';'

    VAR  shift, and go to state 16

    var_list     go to state 21
    var_complex  go to state 18


state 16

   12 var_complex: VAR .
   13            | VAR . '[' NUM ']'

    '['  shift, and go to state 22

    $default  reduce using rule 12 (var_complex)


state 17

    7 decl_list: type var_list . ';'
   10 var_list: var_list . ',' var_complex

    ';'  shift, and go to state 23
    ','  shift, and go to state 24


state 18

   11 var_list: var_complex .

    $default  reduce using rule 11 (var_list)


state 19

    3 main_function: mains '(' ')' . function

    begins  shift, and go to state 25

    function  go to state 26


state 20

    1 program: declaration main_function compile .

    $default  reduce using rule 1 (program)


state 21

    6 decl_list: decl_list type var_list . ';'
   10 var_list: var_list . ',' var_complex

    ';'  shift, and go to state 27
    ','  shift, and go to state 24


state 22

   13 var_complex: VAR '[' . NUM ']'

    NUM  shift, and go to state 28


state 23

    7 decl_list: type var_list ';' .

    $default  reduce using rule 7 (decl_list)


state 24

   10 var_list: var_list ',' . var_complex

    VAR  shift, and go to state 16

    var_complex  go to state 29


state 25

    4 function: begins . Slist ends

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34

    Slist  go to state 35
    Stmt   go to state 36


state 26

    3 main_function: mains '(' ')' function .

    $default  reduce using rule 3 (main_function)


state 27

    6 decl_list: decl_list type var_list ';' .

    $default  reduce using rule 6 (decl_list)


state 28

   13 var_complex: VAR '[' NUM . ']'

    ']'  shift, and go to state 37


state 29

   10 var_list: var_list ',' var_complex .

    $default  reduce using rule 10 (var_list)


state 30

   16 Stmt: VAR . '=' E ';'
   18     | VAR . '[' E ']' '=' E ';'

    '='  shift, and go to state 38
    '['  shift, and go to state 39


state 31

   17 Stmt: reads . '(' VAR ')' ';'
   19     | reads . '(' VAR '[' E ']' ')' ';'

    '('  shift, and go to state 40


state 32

   20 Stmt: writes . '(' E ')' ';'

    '('  shift, and go to state 41


state 33

   21 Stmt: ifs . '(' E ')' thens Slist elses Slist endifs ';'
   22     | ifs . '(' E ')' thens Slist endifs ';'

    '('  shift, and go to state 42


state 34

   23 Stmt: whiles . '(' E ')' dos Slist endwhiles ';'

    '('  shift, and go to state 43


state 35

    4 function: begins Slist . ends
   14 Slist: Slist . Stmt

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34
    ends    shift, and go to state 44

    Stmt  go to state 45


state 36

   15 Slist: Stmt .

    $default  reduce using rule 15 (Slist)


state 37

   13 var_complex: VAR '[' NUM ']' .

    $default  reduce using rule 13 (var_complex)


state 38

   16 Stmt: VAR '=' . E ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 49


state 39

   18 Stmt: VAR '[' . E ']' '=' E ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 50


state 40

   17 Stmt: reads '(' . VAR ')' ';'
   19     | reads '(' . VAR '[' E ']' ')' ';'

    VAR  shift, and go to state 51


state 41

   20 Stmt: writes '(' . E ')' ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 52


state 42

   21 Stmt: ifs '(' . E ')' thens Slist elses Slist endifs ';'
   22     | ifs '(' . E ')' thens Slist endifs ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 53


state 43

   23 Stmt: whiles '(' . E ')' dos Slist endwhiles ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 54


state 44

    4 function: begins Slist ends .

    $default  reduce using rule 4 (function)


state 45

   14 Slist: Slist Stmt .

    $default  reduce using rule 14 (Slist)


state 46

   30 E: VAR .
   31  | VAR . '[' E ']'

    '['  shift, and go to state 55

    $default  reduce using rule 30 (E)


state 47

   32 E: NUM .

    $default  reduce using rule 32 (E)


state 48

   26 E: '(' . E ')'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 56


state 49

   16 Stmt: VAR '=' E . ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ';'   shift, and go to state 62


state 50

   18 Stmt: VAR '[' E . ']' '=' E ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ']'   shift, and go to state 63


state 51

   17 Stmt: reads '(' VAR . ')' ';'
   19     | reads '(' VAR . '[' E ']' ')' ';'

    ')'  shift, and go to state 64
    '['  shift, and go to state 65


state 52

   20 Stmt: writes '(' E . ')' ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ')'   shift, and go to state 66


state 53

   21 Stmt: ifs '(' E . ')' thens Slist elses Slist endifs ';'
   22     | ifs '(' E . ')' thens Slist endifs ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ')'   shift, and go to state 67


state 54

   23 Stmt: whiles '(' E . ')' dos Slist endwhiles ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ')'   shift, and go to state 68


state 55

   31 E: VAR '[' . E ']'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 69


state 56

   24 E: E . '+' E
   25  | E . '*' E
   26  | '(' E . ')'
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ')'   shift, and go to state 70


state 57

   24 E: E '+' . E

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 71


state 58

   25 E: E '*' . E

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 72


state 59

   27 E: E IFEQ . E

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 73


state 60

   28 E: E '>' . E

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 74


state 61

   29 E: E '<' . E

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 75


state 62

   16 Stmt: VAR '=' E ';' .

    $default  reduce using rule 16 (Stmt)


state 63

   18 Stmt: VAR '[' E ']' . '=' E ';'

    '='  shift, and go to state 76


state 64

   17 Stmt: reads '(' VAR ')' . ';'

    ';'  shift, and go to state 77


state 65

   19 Stmt: reads '(' VAR '[' . E ']' ')' ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 78


state 66

   20 Stmt: writes '(' E ')' . ';'

    ';'  shift, and go to state 79


state 67

   21 Stmt: ifs '(' E ')' . thens Slist elses Slist endifs ';'
   22     | ifs '(' E ')' . thens Slist endifs ';'

    thens  shift, and go to state 80


state 68

   23 Stmt: whiles '(' E ')' . dos Slist endwhiles ';'

    dos  shift, and go to state 81


state 69

   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E
   31  | VAR '[' E . ']'

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ']'   shift, and go to state 82


state 70

   26 E: '(' E ')' .

    $default  reduce using rule 26 (E)


state 71

   24 E: E . '+' E
   24  | E '+' E .
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '*'  shift, and go to state 58

    $default  reduce using rule 24 (E)


state 72

   24 E: E . '+' E
   25  | E . '*' E
   25  | E '*' E .
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    $default  reduce using rule 25 (E)


state 73

   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   27  | E IFEQ E .
   28  | E . '>' E
   29  | E . '<' E

    '+'  shift, and go to state 57
    '*'  shift, and go to state 58

    $default  reduce using rule 27 (E)


state 74

   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   28  | E '>' E .
   29  | E . '<' E

    '+'  shift, and go to state 57
    '*'  shift, and go to state 58

    $default  reduce using rule 28 (E)


state 75

   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E
   29  | E '<' E .

    '+'  shift, and go to state 57
    '*'  shift, and go to state 58

    $default  reduce using rule 29 (E)


state 76

   18 Stmt: VAR '[' E ']' '=' . E ';'

    VAR  shift, and go to state 46
    NUM  shift, and go to state 47
    '('  shift, and go to state 48

    E  go to state 83


state 77

   17 Stmt: reads '(' VAR ')' ';' .

    $default  reduce using rule 17 (Stmt)


state 78

   19 Stmt: reads '(' VAR '[' E . ']' ')' ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ']'   shift, and go to state 84


state 79

   20 Stmt: writes '(' E ')' ';' .

    $default  reduce using rule 20 (Stmt)


state 80

   21 Stmt: ifs '(' E ')' thens . Slist elses Slist endifs ';'
   22     | ifs '(' E ')' thens . Slist endifs ';'

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34

    Slist  go to state 85
    Stmt   go to state 36


state 81

   23 Stmt: whiles '(' E ')' dos . Slist endwhiles ';'

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34

    Slist  go to state 86
    Stmt   go to state 36


state 82

   31 E: VAR '[' E ']' .

    $default  reduce using rule 31 (E)


state 83

   18 Stmt: VAR '[' E ']' '=' E . ';'
   24 E: E . '+' E
   25  | E . '*' E
   27  | E . IFEQ E
   28  | E . '>' E
   29  | E . '<' E

    '+'   shift, and go to state 57
    '*'   shift, and go to state 58
    IFEQ  shift, and go to state 59
    '>'   shift, and go to state 60
    '<'   shift, and go to state 61
    ';'   shift, and go to state 87


state 84

   19 Stmt: reads '(' VAR '[' E ']' . ')' ';'

    ')'  shift, and go to state 88


state 85

   14 Slist: Slist . Stmt
   21 Stmt: ifs '(' E ')' thens Slist . elses Slist endifs ';'
   22     | ifs '(' E ')' thens Slist . endifs ';'

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34
    endifs  shift, and go to state 89
    elses   shift, and go to state 90

    Stmt  go to state 45


state 86

   14 Slist: Slist . Stmt
   23 Stmt: whiles '(' E ')' dos Slist . endwhiles ';'

    VAR        shift, and go to state 30
    reads      shift, and go to state 31
    writes     shift, and go to state 32
    ifs        shift, and go to state 33
    whiles     shift, and go to state 34
    endwhiles  shift, and go to state 91

    Stmt  go to state 45


state 87

   18 Stmt: VAR '[' E ']' '=' E ';' .

    $default  reduce using rule 18 (Stmt)


state 88

   19 Stmt: reads '(' VAR '[' E ']' ')' . ';'

    ';'  shift, and go to state 92


state 89

   22 Stmt: ifs '(' E ')' thens Slist endifs . ';'

    ';'  shift, and go to state 93


state 90

   21 Stmt: ifs '(' E ')' thens Slist elses . Slist endifs ';'

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34

    Slist  go to state 94
    Stmt   go to state 36


state 91

   23 Stmt: whiles '(' E ')' dos Slist endwhiles . ';'

    ';'  shift, and go to state 95


state 92

   19 Stmt: reads '(' VAR '[' E ']' ')' ';' .

    $default  reduce using rule 19 (Stmt)


state 93

   22 Stmt: ifs '(' E ')' thens Slist endifs ';' .

    $default  reduce using rule 22 (Stmt)


state 94

   14 Slist: Slist . Stmt
   21 Stmt: ifs '(' E ')' thens Slist elses Slist . endifs ';'

    VAR     shift, and go to state 30
    reads   shift, and go to state 31
    writes  shift, and go to state 32
    ifs     shift, and go to state 33
    whiles  shift, and go to state 34
    endifs  shift, and go to state 96

    Stmt  go to state 45


state 95

   23 Stmt: whiles '(' E ')' dos Slist endwhiles ';' .

    $default  reduce using rule 23 (Stmt)


state 96

   21 Stmt: ifs '(' E ')' thens Slist elses Slist endifs . ';'

    ';'  shift, and go to state 97


state 97

   21 Stmt: ifs '(' E ')' thens Slist elses Slist endifs ';' .

    $default  reduce using rule 21 (Stmt)
