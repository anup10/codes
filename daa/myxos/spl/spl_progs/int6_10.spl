alias physicalsp S0;
physicalsp = ([PTBR + 2* (SP/512)]*512 + (SP%512));


alias syscallno S1;
syscallno = [physicalsp-1];

alias arg S2;
arg=[physicalsp-3];

alias counter S3;
counter=0;

alias currentpid S4;
currentpid = (PTBR - 1024)/8;

alias currentpcb S5;
currentpcb = READY_LIST + (currentpid *32);


if( syscallno == 9) then
	while([FAT + (counter*8)]!= arg && counter<64) do
		counter=counter+1;
	endwhile;
	
	if(counter>=64) then
		[physicalsp-2]=-1;
		ireturn;
	endif;

	alias basic_b S5;
	basic_b = [FAT + (counter*8) + 2];
									//loading basic block into scratchpad

	load(1,basic_b);

	alias new_cb S6;
	new_cb = 0;
	alias current_cb S7;
	current_cb=0;
	

	//	print "jk1";								//dec m/y references by the current proc
		counter=0;
		while(counter<3) do
			if([PTBR + (counter*2)+1]=="01" || [PTBR + (counter*2)+1]=="11") then
				[MEM_LIST + [PTBR + (counter*2)]]=[MEM_LIST + [PTBR + (counter*2)]]-1;
				counter=counter+1;
			else
	if(([PTBR + (counter*2)+1]=="00" || [PTBR + (counter*2)+1]=="10") && ([PTBR+ (counter*2)] >=448) && ([PTBR+ (counter*2)] <=511)) then
				[DISK_LIST + [PTBR + (counter*2)]]=[DISK_LIST + [PTBR + (counter*2)]]-1;
				counter=counter+1;
				else
					counter=counter+1;
				endif;
			endif;
		endwhile;
	//	print "jk2";								//closing files opened by current proc
		counter=0;		
		while(counter<8) do
			if([currentpcb + (counter*2 )+15]!=-1) then
			      [FILE_TABLE + ([currentpcb + (counter*2)+15]*2) + 1]=[FILE_TABLE + ([currentpcb + (counter*2)+15]*2) + 1]-1;
				if([FILE_TABLE + ([currentpcb + (counter*2)+15]*2) + 1]==0) then
					[FILE_TABLE + ([currentpcb + (counter*2)+15]*2) ]=-1;
				endif;
				[currentpcb + (counter*2 )+15]=-1;
				counter=counter+1;
			else
				counter=counter+1;
			endif;
		endwhile;

	//print "jk3";								//setting up page table entries
	counter=0;
	while([SCRATCHPAD + counter] != -1 && counter<512) do  
		[PTBR+ (counter*2)]=[SCRATCHPAD + counter];
		[PTBR+ (counter*2)+1]="00";
		counter=counter+1;
	endwhile;
	while(counter<3) do
		[PTBR + (counter*2)]=-1;
		[PTBR + (counter*2)+1]="00";
		counter=counter+1;
	endwhile;
	[PTBR + (counter*2) +1]="01";
		
	SP=3*512;

	[[PTBR + 2* (SP/512)]*512 + (SP%512)]=0;
	store(1,basic_b);
	store(6,20);
	//print "jk4";
	breakpoint;
	ireturn;
endif;
			















































